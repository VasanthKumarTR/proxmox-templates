packer {
  required_plugins {
    proxmox = {
      version = ">= 1.1.3"
      source  = "github.com/hashicorp/proxmox"
    }
  }
}

variable "proxmox_api_url" {
  type    = string
  description = "The URL of the Proxmox API (e.g., https://proxmox.example.com:8006/api2/json)"
}

variable "proxmox_api_token_id" {
  type    = string
  description = "Proxmox API token ID (e.g., user@pam!tokenname)"
}

variable "proxmox_api_token_secret" {
  type    = string
  sensitive = true
  description = "Proxmox API token secret"
}

variable "proxmox_node" {
  type    = string
  description = "The name of the Proxmox node to build on"
}

variable "template_name" {
  type    = string
  default = "ubuntu-24-04-template"
  description = "The name of the template to create"
}

variable "template_description" {
  type    = string
  default = "Ubuntu 24.04 Template generated by Packer"
  description = "Description for the template"
}

variable "iso_file" {
  type    = string
  default = "local:iso/ubuntu-24.04-live-server-amd64.iso"
  description = "The Ubuntu ISO file to use (must be accessible to Proxmox)"
}

variable "iso_url" {
  type    = string
  default = "https://releases.ubuntu.com/24.04/ubuntu-24.04-live-server-amd64.iso"
  description = "URL to download the Ubuntu ISO from if not present on Proxmox"
}

variable "iso_checksum" {
  type    = string
  default = "sha256:45f873de9f8cb637345d6e66a583762730bbcb25a4f0c02b3af6016dad78e359"
  description = "Checksum of the ISO file"
}

variable "vm_id" {
  type    = number
  default = 9000
  description = "ID for the VM when created in Proxmox"
}

variable "cores" {
  type    = string
  default = "2"
  description = "Number of CPU cores for the VM"
}

variable "memory" {
  type    = string
  default = "2048"
  description = "Memory in MB for the VM"
}

variable "disk_size" {
  type    = string
  default = "20G"
  description = "Disk size for the VM"
}

variable "ssh_username" {
  type    = string
  default = "ubuntu"
  description = "Username to use for SSH access during build"
}

variable "ssh_password" {
  type    = string
  default = "ubuntu"
  sensitive = true
  description = "Password to use for SSH access during build"
}

variable "vm_network_bridge" {
  type    = string
  default = "vmbr0"
  description = "Bridge to use for VM networking"
}

source "proxmox-iso" "ubuntu_2404" {
  proxmox_url              = var.proxmox_api_url
  username                 = var.proxmox_api_token_id
  token                    = var.proxmox_api_token_secret
  insecure_skip_tls_verify = true

  node                 = var.proxmox_node
  vm_id                = var.vm_id
  vm_name              = var.template_name
  template_description = var.template_description

  iso_url          = var.iso_url
  iso_checksum     = var.iso_checksum
  iso_storage_pool = "local"
  iso_file         = var.iso_file
  unmount_iso      = true

  qemu_agent = true

  cores   = var.cores
  sockets = "1"
  memory  = var.memory

  network_adapters {
    model  = "virtio"
    bridge = var.vm_network_bridge
  }

  disks {
    disk_size    = var.disk_size
    format       = "raw"
    storage_pool = "local-lvm"
    type         = "virtio"
  }

  boot_command = [
    "c<wait>",
    "linux /casper/vmlinuz --- autoinstall ds=\"nocloud-net;seedfrom=http://{{ .HTTPIP }}:{{ .HTTPPort }}/\"",
    "<enter><wait>",
    "initrd /casper/initrd",
    "<enter><wait>",
    "boot",
    "<enter>"
  ]
  
  boot_wait = "10s"
  
  http_directory = "http"

  ssh_username = var.ssh_username
  ssh_password = var.ssh_password
  ssh_timeout  = "20m"
}

build {
  name = "ubuntu-server-2404"
  sources = ["source.proxmox-iso.ubuntu_2404"]

  provisioner "shell" {
    inline = [
      "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done",
      "echo 'Cloud-init finished...'",
      "sudo apt-get update",
      "sudo apt-get upgrade -y",
      "sudo apt-get install -y qemu-guest-agent cloud-init curl wget",
      "sudo systemctl enable qemu-guest-agent",
      "sudo systemctl start qemu-guest-agent"
    ]
  }

  provisioner "shell" {
    inline = [
      "echo 'Installing additional packages...'",
      "sudo apt-get install -y vim net-tools htop iotop iftop nmon",
      "sudo apt-get install -y python3-pip git unzip jq",
      "sudo apt-get install -y openssh-server fail2ban"
    ]
  }

  provisioner "shell" {
    inline = [
      "echo 'Cleaning up...'",
      "sudo apt-get autoremove -y",
      "sudo apt-get clean",
      "sudo rm -rf /var/lib/apt/lists/*",
      "sudo rm -rf /tmp/*",
      "sudo rm -f /var/cache/apt/archives/*.deb",
      "sudo rm -f /var/cache/apt/archives/partial/*.deb",
      "sudo rm -f /var/cache/apt/*.bin",
      "sudo cloud-init clean"
    ]
  }

  provisioner "shell" {
    inline = [
      "echo 'Preparing for template conversion...'",
      "sudo rm -f /etc/machine-id",
      "sudo truncate -s 0 /etc/machine-id",
      "sudo rm -f /var/lib/dbus/machine-id",
      "sudo ln -s /etc/machine-id /var/lib/dbus/machine-id",
      "sudo rm -f /etc/ssh/ssh_host_*",
      "sudo mkdir -p /etc/systemd/system/ssh.service.d/",
      "echo '[Service]' | sudo tee /etc/systemd/system/ssh.service.d/regenerate_ssh_host_keys.conf",
      "echo 'ExecStartPre=/bin/sh -c \"if [ -e /dev/zero ]; then rm -f /etc/ssh/ssh_host_* && ssh-keygen -A; fi\"' | sudo tee -a /etc/systemd/system/ssh.service.d/regenerate_ssh_host_keys.conf"
    ]
  }
}
