name: Build Windows 2022 Proxmox Template

on:
  push:
    branches: [ codesync, develop ]
    paths:
      - 'Proxmox/Windows2022/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ codesync ]
    paths:
      - 'Proxmox/Windows2022/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if template exists'
        required: false
        default: false
        type: boolean
      terraform_apply:
        description: 'Apply Terraform after successful Packer build'
        required: false
        default: false
        type: boolean

env:
  PACKER_VERSION: "1.12.0"
  TERRAFORM_VERSION: "1.9.0"

jobs:
  validate:
    name: Validate Windows 2022
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Packer Version
        run: |
          # Check Docker access and fix permissions if needed
          if ! docker ps >/dev/null 2>&1; then
            echo "Docker permission issue detected. Attempting to fix..."
            sudo usermod -aG docker $USER || true
            sudo chmod 666 /var/run/docker.sock || true
          fi
          docker run --rm -v $PWD:/workspace -w /workspace \
            hashicorp/packer:${{ env.PACKER_VERSION }} version

      - name: Validate Packer Template
        run: |
          # Ensure Docker access
          if ! docker ps >/dev/null 2>&1; then
            sudo chmod 666 /var/run/docker.sock || true
          fi
          # Initialize and validate in the same container to preserve plugin installation
          docker run --rm -v $PWD:/workspace -w /workspace/Proxmox/Windows2022/Packer \
            hashicorp/packer:${{ env.PACKER_VERSION }} \
            sh -c "packer init windows-2022.pkr.hcl && packer validate -var-file=variables.pkrvars.hcl windows-2022.pkr.hcl"

  build-packer:
    name: Build Windows 2022 Template
    runs-on: self-hosted
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Packer Template
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
          PROXMOX_TOKEN: ${{ secrets.PROXMOX_TOKEN }}
          PROXMOX_NODE: ${{ secrets.PROXMOX_NODE }}
        run: |
          # Ensure Docker access
          if ! docker ps >/dev/null 2>&1; then
            sudo chmod 666 /var/run/docker.sock || true
          fi
          force_rebuild="${{ github.event.inputs.force_rebuild || 'false' }}"
          cd Proxmox/Windows2022/Packer
          vm_id="9100"
          if [ "$force_rebuild" != "true" ]; then
            echo "(Optional) Check if template $vm_id exists via Proxmox API here"
          fi
          cat > secrets.pkrvars.hcl << EOF
          proxmox_url = "$PROXMOX_URL"
          proxmox_username = "$PROXMOX_USERNAME"
          proxmox_token = "$PROXMOX_TOKEN"
          proxmox_node = "$PROXMOX_NODE"
          EOF
          # Initialize and build in the same container to preserve plugin installation
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            --network host \
            hashicorp/packer:${{ env.PACKER_VERSION }} \
            sh -c "packer init windows-2022.pkr.hcl && packer build -var-file=variables.pkrvars.hcl -var-file=secrets.pkrvars.hcl windows-2022.pkr.hcl"
          rm -f secrets.pkrvars.hcl

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: packer-logs-windows2022
          path: |
            Proxmox/Windows2022/Packer/*.log
            Proxmox/Windows2022/Packer/packer_cache/
          retention-days: 7

  terraform-test:
    name: Terraform Test (Optional)
    runs-on: self-hosted
    needs: build-packer
    if: |
      always() && 
      needs.build-packer.result == 'success' && 
      (github.event.inputs.terraform_apply == 'true' || github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform Plan/Apply
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
          PROXMOX_TOKEN: ${{ secrets.PROXMOX_TOKEN }}
          PROXMOX_NODE: ${{ secrets.PROXMOX_NODE }}
        run: |
          # Ensure Docker access
          if ! docker ps >/dev/null 2>&1; then
            sudo chmod 666 /var/run/docker.sock || true
          fi
          cd Proxmox/Windows2022/Terraform
          cat > secrets.auto.tfvars << EOF
          proxmox_api_url = "$PROXMOX_URL"
          proxmox_api_token_secret = "PVEAPIToken=$PROXMOX_USERNAME=$PROXMOX_TOKEN"
          target_node = "$PROXMOX_NODE"
          EOF
          docker run --rm -v $PWD:/workspace -w /workspace hashicorp/terraform:${{ env.TERRAFORM_VERSION }} init
          docker run --rm -v $PWD:/workspace -w /workspace hashicorp/terraform:${{ env.TERRAFORM_VERSION }} plan -out=tfplan
          if [ "${{ github.event.inputs.terraform_apply }}" = "true" ]; then
            docker run --rm -v $PWD:/workspace -w /workspace hashicorp/terraform:${{ env.TERRAFORM_VERSION }} apply -auto-approve tfplan
            sleep 60
            docker run --rm -v $PWD:/workspace -w /workspace hashicorp/terraform:${{ env.TERRAFORM_VERSION }} destroy -auto-approve || true
          fi
          rm -f secrets.auto.tfvars

  notify:
    name: Notify Results
    runs-on: self-hosted
    needs: [build-packer, terraform-test]
    if: always()
    steps:
      - name: Result
        run: |
          if [ "${{ needs.build-packer.result }}" = "success" ]; then
            echo "✅ Windows 2022 template build completed successfully!"
          else
            echo "❌ Windows 2022 template build failed."; exit 1
          fi
