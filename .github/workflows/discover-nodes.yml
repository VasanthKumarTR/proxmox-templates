name: Discover Proxmox Nodes

on:
  workflow_dispatch:

jobs:
  discover:
    name: Comprehensive Proxmox Discovery
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Environment Check
        run: |
          echo "üîß ENVIRONMENT CHECK"
          echo "==================="
          echo "Runner OS: $(uname -a)"
          echo "Current directory: $(pwd)"
          echo "Available tools:"
          which curl && curl --version | head -1 || echo "‚ùå curl not found"
          which jq && jq --version || echo "‚ùå jq not found"
          which docker && docker --version || echo "‚ùå docker not found"
          echo ""
        
      - name: Network Connectivity Test
        run: |
          echo "üåê NETWORK CONNECTIVITY TEST"
          echo "============================="
          
          PROXMOX_IPS=("172.16.11.1" "172.16.11.2" "172.16.11.3")
          REACHABLE_IPS=()
          
          for ip in "${PROXMOX_IPS[@]}"; do
            echo "Testing $ip..."
            if ping -c 2 -W 3 "$ip" > /dev/null 2>&1; then
              echo "‚úÖ $ip - Network reachable"
              REACHABLE_IPS+=("$ip")
            else
              echo "‚ùå $ip - Network unreachable"
            fi
          done
          
          echo ""
          echo "üìä SUMMARY: ${#REACHABLE_IPS[@]}/3 nodes network reachable"
          if [ ${#REACHABLE_IPS[@]} -eq 0 ]; then
            echo "‚ö†Ô∏è  No Proxmox nodes reachable - check network configuration"
          fi
          
          # Export for next steps
          echo "REACHABLE_IPS=${REACHABLE_IPS[*]}" >> $GITHUB_ENV
          echo ""

      - name: Proxmox API Connectivity Test
        run: |
          echo "üîå PROXMOX API CONNECTIVITY TEST"
          echo "================================="
          
          PROXMOX_IPS=($REACHABLE_IPS)
          API_WORKING_IPS=()
          
          for ip in "${PROXMOX_IPS[@]}"; do
            echo "Testing Proxmox API on $ip:8006..."
            PROXMOX_URL="https://$ip:8006/api2/json"
            
            if curl -k -m 10 -s "$PROXMOX_URL/version" > /dev/null 2>&1; then
              echo "‚úÖ $ip - Proxmox API responding"
              API_WORKING_IPS+=("$ip")
              
              # Get version info
              VERSION=$(curl -k -m 10 -s "$PROXMOX_URL/version" | jq -r '.data.version // "unknown"' 2>/dev/null)
              echo "   Version: $VERSION"
            else
              echo "‚ùå $ip - Proxmox API not responding"
            fi
          done
          
          echo ""
          echo "üìä SUMMARY: ${#API_WORKING_IPS[@]}/${#PROXMOX_IPS[@]} reachable nodes have working API"
          
          # Export for next steps
          echo "API_WORKING_IPS=${API_WORKING_IPS[*]}" >> $GITHUB_ENV
          echo ""

      - name: Node Discovery with Authentication
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_TOKEN: ${{ secrets.PROXMOX_TOKEN }}
        run: |
          echo "üîê AUTHENTICATED NODE DISCOVERY"
          echo "==============================="
          
          if [ -z "$PROXMOX_TOKEN" ]; then
            echo "‚ùå PROXMOX_TOKEN secret not configured"
            echo "   Please set GitHub secret: PROXMOX_TOKEN"
            exit 0
          fi
          
          if [ -z "$PROXMOX_URL" ]; then
            echo "‚ùå PROXMOX_URL secret not configured"
            echo "   Please set GitHub secret: PROXMOX_URL"
            exit 0
          fi
          
          echo "Testing authentication with configured URL: $PROXMOX_URL"
          
          # Extract IP from URL
          CONFIGURED_IP=$(echo "$PROXMOX_URL" | grep -oP '(?<=://)[^:]+')
          echo "Configured IP: $CONFIGURED_IP"
          
          # Test authentication
          if curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
             "$PROXMOX_URL/version" | jq -e '.data' > /dev/null 2>&1; then
            echo "‚úÖ Authentication successful"
            
            # Get cluster nodes
            echo ""
            echo "üìã DISCOVERED NODES:"
            NODES=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                   "$PROXMOX_URL/nodes" | jq -r '.data[]? | "\(.node) (Status: \(.status), CPU: \(.cpu*100|floor)%, Memory: \(.mem/1024/1024/1024|floor)GB/\(.maxmem/1024/1024/1024|floor)GB)"' 2>/dev/null)
            
            if [ -n "$NODES" ]; then
              echo "$NODES" | while read -r line; do
                echo "   ‚úÖ $line"
              done
              
              # Extract just node names for later use
              NODE_NAMES=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                          "$PROXMOX_URL/nodes" | jq -r '.data[]?.node' 2>/dev/null | tr '\n' ' ')
              echo ""
              echo "üí° Available node names: $NODE_NAMES"
              echo "NODE_NAMES=$NODE_NAMES" >> $GITHUB_ENV
            else
              echo "   ‚ùå No nodes found or permission denied"
            fi
          else
            echo "‚ùå Authentication failed"
            echo "   Check PROXMOX_TOKEN format: should be the secret part only"
            echo "   Token should have sufficient privileges"
          fi
          echo ""

      - name: ISO Storage Check
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_TOKEN: ${{ secrets.PROXMOX_TOKEN }}
        run: |
          echo "üìÄ ISO STORAGE AVAILABILITY CHECK"
          echo "=================================="
          
          if [ -z "$PROXMOX_TOKEN" ] || [ -z "$NODE_NAMES" ]; then
            echo "‚ö†Ô∏è  Skipping ISO check - authentication failed or no nodes discovered"
            exit 0
          fi
          
          # Check each discovered node for ISO storage
          for node in $NODE_NAMES; do
            echo "Checking ISO storage on node: $node"
            
            # Get storage list
            STORAGES=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                      "$PROXMOX_URL/nodes/$node/storage" | \
                      jq -r '.data[]? | select(.content | contains("iso")) | .storage' 2>/dev/null)
            
            if [ -n "$STORAGES" ]; then
              echo "‚úÖ ISO storage available on $node:"
              for storage in $STORAGES; do
                echo "   üì¶ Storage: $storage"
                
                # Check for required ISOs
                ISOS=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                      "$PROXMOX_URL/nodes/$node/storage/$storage/content" | \
                      jq -r '.data[]? | select(.content=="iso") | .volid' 2>/dev/null)
                
                if [ -n "$ISOS" ]; then
                  echo "   Available ISOs:"
                  echo "$ISOS" | while read -r iso; do
                    echo "     üíø $iso"
                  done
                  
                  # Check for specific required ISOs
                  echo ""
                  echo "   üéØ REQUIRED ISO CHECK:"
                  if echo "$ISOS" | grep -q "windows.*server.*2022"; then
                    echo "     ‚úÖ Windows Server 2022 ISO found"
                  else
                    echo "     ‚ùå Windows Server 2022 ISO missing"
                    echo "        Expected: windows server 2022 ISO file"
                  fi
                  
                  if echo "$ISOS" | grep -q "virtio-win"; then
                    echo "     ‚úÖ VirtIO drivers ISO found"
                  else
                    echo "     ‚ùå VirtIO drivers ISO missing"
                    echo "        Expected: virtio-win-*.iso"
                  fi
                else
                  echo "   ‚ùå No ISOs found in $storage"
                fi
              done
            else
              echo "‚ùå No ISO storage found on $node"
            fi
            echo ""
          done

      - name: VM ID Availability Check
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_TOKEN: ${{ secrets.PROXMOX_TOKEN }}
        run: |
          echo "üÜî VM ID AVAILABILITY CHECK"
          echo "==========================="
          
          if [ -z "$PROXMOX_TOKEN" ] || [ -z "$NODE_NAMES" ]; then
            echo "‚ö†Ô∏è  Skipping VM ID check - authentication failed or no nodes discovered"
            exit 0
          fi
          
          TARGET_VM_ID="9100"
          echo "Checking if VM ID $TARGET_VM_ID is available..."
          
          for node in $NODE_NAMES; do
            echo "Checking node: $node"
            
            VM_EXISTS=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                       "$PROXMOX_URL/nodes/$node/qemu/$TARGET_VM_ID" 2>/dev/null | \
                       jq -e '.data' > /dev/null 2>&1 && echo "exists" || echo "available")
            
            if [ "$VM_EXISTS" = "exists" ]; then
              echo "   ‚ö†Ô∏è  VM ID $TARGET_VM_ID already exists on $node"
              
              # Get VM details
              VM_INFO=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                       "$PROXMOX_URL/nodes/$node/qemu/$TARGET_VM_ID/config" | \
                       jq -r '.data | "Name: \(.name // "unnamed"), Template: \(.template // false)"' 2>/dev/null)
              echo "      Details: $VM_INFO"
              echo "      Use force_rebuild=true to overwrite"
            else
              echo "   ‚úÖ VM ID $TARGET_VM_ID is available on $node"
            fi
          done
          echo ""

      - name: Storage Space Check
        env:
          PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
          PROXMOX_TOKEN: ${{ secrets.PROXMOX_TOKEN }}
        run: |
          echo "üíæ STORAGE SPACE CHECK"
          echo "======================"
          
          if [ -z "$PROXMOX_TOKEN" ] || [ -z "$NODE_NAMES" ]; then
            echo "‚ö†Ô∏è  Skipping storage check - authentication failed or no nodes discovered"
            exit 0
          fi
          
          for node in $NODE_NAMES; do
            echo "Storage on node: $node"
            
            STORAGES=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                      "$PROXMOX_URL/nodes/$node/storage" | \
                      jq -r '.data[]? | select(.content | contains("images")) | .storage' 2>/dev/null)
            
            for storage in $STORAGES; do
              STORAGE_INFO=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                           "$PROXMOX_URL/nodes/$node/storage/$storage/status" | \
                           jq -r '.data | "\(.avail/1024/1024/1024|floor)GB available / \(.total/1024/1024/1024|floor)GB total (\(.used/1024/1024/1024|floor)GB used)"' 2>/dev/null)
              
              if [ -n "$STORAGE_INFO" ]; then
                echo "   üì¶ $storage: $STORAGE_INFO"
                
                AVAIL_GB=$(curl -k -m 15 -s -H "Authorization: PVEAPIToken=$PROXMOX_TOKEN" \
                          "$PROXMOX_URL/nodes/$node/storage/$storage/status" | \
                          jq -r '.data.avail/1024/1024/1024|floor' 2>/dev/null)
                
                if [ "$AVAIL_GB" -gt 100 ]; then
                  echo "      ‚úÖ Sufficient space for template build"
                else
                  echo "      ‚ö†Ô∏è  Low disk space - recommend 100GB+ for Windows template"
                fi
              fi
            done
            echo ""
          done

      - name: Final Summary & Recommendations
        run: |
          echo "üéØ FINAL SUMMARY & RECOMMENDATIONS"
          echo "==================================="
          
          echo "Network Status:"
          if [ -n "$REACHABLE_IPS" ]; then
            echo "‚úÖ Reachable Proxmox nodes: $REACHABLE_IPS"
          else
            echo "‚ùå No Proxmox nodes reachable"
          fi
          
          if [ -n "$API_WORKING_IPS" ]; then
            echo "‚úÖ Working Proxmox APIs: $API_WORKING_IPS"
          else
            echo "‚ùå No working Proxmox APIs"
          fi
          
          if [ -n "$NODE_NAMES" ]; then
            echo "‚úÖ Discovered nodes: $NODE_NAMES"
            echo ""
            echo "üöÄ READY TO BUILD!"
            echo "Next steps:"
            echo "1. Update GitHub secrets if needed:"
            echo "   - PROXMOX_URL should point to a working API"
            echo "   - PROXMOX_NODE should be one of: $NODE_NAMES"
            echo "2. Upload required ISOs if missing"
            echo "3. Run 'Build Windows 2022 Proxmox Template' workflow"
          else
            echo "‚ùå No nodes discovered"
            echo ""
            echo "üîß TROUBLESHOOTING NEEDED:"
            echo "1. Check network connectivity to Proxmox nodes"
            echo "2. Verify GitHub secrets: PROXMOX_URL, PROXMOX_TOKEN"
            echo "3. Ensure API token has sufficient privileges"
          fi
